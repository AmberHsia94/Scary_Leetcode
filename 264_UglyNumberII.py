# coding=utf-8
# Write a program to find the n-th ugly number.
# Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.
# 我们把只包含因子 2、3 和 5 的数称作丑数
#
# Example:
# Input: n = 10
# Output: 12
# Explanation: 1, 2, 3, 4, 5, 6, 8, 9, 10, 12 is the sequence of the first 10 ugly numbers.

# Note:
# 1 is typically treated as an ugly number.
# n does not exceed 1690.

# 1. Each number is generated by a former number multiplied by 2, 3 or 5.
#        That's saying, next_num = min(x * 2, y * 3, z * 5)
#        where x, y, z is an pre existing number.
# 2. When we find a next_num, we update the x(maybe y or z at the same time)

def ugly(n):

    dp = [1 for i in range(n)]
    n_2, n_3, n_5 = 0,0,0

    for i in range(1, n):
            v_2 = 2 * dp[n_2]
            v_3 = 3 * dp[n_3]
            v_5 = 5 * dp[n_5]
            dp[i] = min(v_2, v_3, v_5)

            if dp[i] == v_2:
                n_2 += 1
            elif dp[i] == v_3:
                n_3 += 1
            else:
                n_5 += 1
    return dp

print ugly(10)


class Solution(object):
    """
    Here is the detailed explanation:
    https://leetcode.com/discuss/58186/elegant-c-solution-o-n-space-time-with-detailed-explanation
    In a short:
    1. Each number is generated by a former number multiplied by 2, 3 or 5.
       That's saying, next_num = min(x * 2, y * 3, z * 5)
       where x, y, z is an pre existing number.
    2. When we find a next_num, we update the x(maybe y or z at the same time)
    """
    def nthUglyNumber(self, n):
        if n <= 0:
            return
        ugly_nums = [1] * n
        l_2, l_3, l_5 = 0, 0, 0
        for i in range(1, n):
            v_2 = ugly_nums[l_2] * 2
            v_3 = ugly_nums[l_3] * 3
            v_5 = ugly_nums[l_5] * 5
            ugly_nums[i] = min(v_2, v_3, v_5)
            if ugly_nums[i] == v_2:
                l_2 += 1
            if ugly_nums[i] == v_3:
                l_3 += 1
            if ugly_nums[i] == v_5:
                l_5 += 1

        return ugly_nums[-1]

sol = Solution()
print sol.nthUglyNumber(10)


